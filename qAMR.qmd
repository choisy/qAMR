---
title: "Quantitative AMR"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

## Packages

Installing packages:

```{r message = FALSE}
needed_packages <- c("dplyr",
                     "magrittr",
                     "plot3D",
                     "purrr",
                     "rgl")

to_install <- needed_packages[! needed_packages %in% installed.packages()[,"Package"]]
if (length(to_install)) install.packages(to_install)
```

Loading packages:

```{r message = FALSE}
library(dplyr)
library(purrr)
```


## Functions

A few utility functions.

```{r}
polygon2 <- function(...) polygon(..., border = NA)
```

```{r}
polygon3 <- function(x, y, col = 4, alpha = .2, ...) {
  polygon2(c(x[1], x, tail(x, 1)), c(0, y, 0), col = adjustcolor(col, alpha))
}
```

```{r}
polygon4 <- function(x, y, ...) polygon2(c(x[1], x), c(tail(y, 1), y), ...)
```

```{r}
polygon5 <- function(x, y, ...) polygon2(c(tail(x, 1), x), c(y[1], y), ...)
```

```{r}
plotl <- function(..., lwd = 4, col = 4) plot(..., type = "l", lwd = lwd, col = col)
```

```{r}
lines2 <- function(..., lwd = 4, col = 2) lines(..., lwd = lwd, col = col)
```

```{r}
rgb2 <- function(...) rgb(..., alpha = 255 / 3, maxColorValue = 255)
```

```{r}
rect2 <- function(...) rect(..., border = NA)
```

```{r}
seq2 <- function(...) seq(..., le = 512)
```

```{r}
as_transposed_dataframe <- function(x) as.data.frame(t(as.data.frame(x)))
```

```{r}
log10Tck <- function(side, type) {
   lim <- switch(side, 
                 x = par("usr")[1:2],
                 y = par("usr")[3:4],
                 stop("side argument must be 'x' or 'y'"))
   at <- floor(lim[1]):ceiling(lim[2])
   switch(type,
          minor = outer(1:9, 10^(min(at):max(at))),
          major = 10^at,
          stop("type argument must be 'major' or 'minor'"))
}
```

```{r}
add_ticks <- function() {
  at1 <- log10Tck("x", "major")
  at2 <- log10Tck("x", "minor")
  axis(1, log10(at1), at1, tcl = -.5)
  axis(1, log10(at2), NA, tcl = -.25)
  axis(2)
}
```


## A bimodal distribution

```{r}
x <- seq2(0, 10)
y1 <- dnorm(x, 2.5, .8)
y2 <- dnorm(x, 7, .5)
plot(x, y1, type = "n")
polygon3(x, y1)
polygon3(x, .25 * y2)
```


## A scale-free metric of resistance

$$
x = \frac{\log\left(\frac{\rm MIC}{\rm C_0}\right)}{\log\left(\frac{\rm C_1}{\rm C_0}\right)}
$$

```{r}
C0 <- 1
C1 <- 3
mic <- seq2(0, 10)
x <- log(mic / C0) / log(C1 / C0)
plotl(mic, x)
```


## The MMNP model

$b(t,y)$ is the density of bacteria with resistance level $y$ at time $t$ and
$B(t) = \int_\mathbb{R} b(t,y)dy$ is the total density of bacteria at time $t$. The
evolutionary dynamics is described by the following equation:

$$
\frac{\partial b}{\partial t} = \frac{1}{(1 + B(t))^\alpha}\int_\mathbb{R} J(x-y)p(y)b(t,y)dy - (\mu(x) + k(x))b(t,x)
$$

The antimicrobial activity as a function of bacterial resistance can be expressed as:

$$
k(x) = k_0\left(\frac{k_1}{k_0}\right)^x
$$

The corresponding R function reads:

```{r}
k <- function(x, k0, k1) {
  if (any(c(k0, k1) == 0)) return(0)
  k0 * (k1 / k0)^x
}
```

An illustration:

```{r}
x <- seq2(-2, 4)
plotl(x, k(x, 5, 3))
```

The maximum bacterial growth rate as a function of bacterial resistance:

$$
p(x) = \frac{p_m}{1 + \frac{p_m - p_0}{p_0}\left(\frac{p_0}{p_1}\frac{p_m - p_1}{p_m - p_0}\right)^x}
$$

The corresponding R function:

```{r}
p <- function(x, pm, p0, p1) {
  pm / (1 + ((pm - p0) / p0) * (p0 * (pm - p1) / (p1 * (pm - p0)))^x)
}
```

An illustration:

```{r}
x <- seq2(-9, 10)
plotl(x, p(x, 10, 5, 3))
```

The basic reproduction ratio:

$$
\mathcal{R}_0(x) = \frac{p(x)}{\mu(x) + k(x)}
$$

The corresponding R function:

```{r}
R0 <- function(x, k0 = 3, k1 = .03, pm = 10, p0 = 9.5, p1 = 4.75, mu = .9) {
  p(x, pm, p0, p1) / (mu + k(x, k0, k1))
}
```

The invasion fitness of mutant $y$ in a resident population $x$:

$$
f_x(y) = \frac{\mathcal{R}_0(y) - \mathcal{R}_0(x)}{\mathcal{R}_0(x)}
$$

$$
\frac{d\mathcal{R}_0}{dx} = \frac{k_0\log(1 + \theta)}{\left(\mu + \frac{k_0}{(1 + \theta)^x}\right)(1 + \theta)^x} - \frac{\left(\frac{p_m}{p_0} - 1\right)\log(\Delta)\Delta^x}{1 + \left(\frac{p_m}{p_0} - 1\right)\Delta^x}
$$
with 

$$
\theta = \frac{k_0 - k_1}{k_1} > 0
$$

where $\theta = 0$ means there is no fitness advantage provided by an increase in
resistance level and

$$
\Delta = \frac{p_0}{p_1}\frac{p_m - p_1}{p_m - p_0} > 1
$$

where $\Delta = 1$ means there is no cost of resistance.

A function that looks for the ESS:

```{r}
R_evol_level <- function(k0, k1, p1, p0, pm, mu, interval = c(-10, 10), ...) {
  Delta <- p0 * (pm - p1) / (p1 * (pm - p0))
  Delta2 <- pm / p0 - 1
  theta2 <- k1 / k0
  derivative <- function(x) {
    abs(log(k0 / k1) * k0 * theta2^x / (mu + k0 * theta2^x) -
          Delta2 * log(Delta) * Delta^x / (1 + Delta2 * Delta^x))
  }
  optimize(derivative, interval = interval, ...)$minimum
}
```

Plot of R0:

```{r}
x <- seq2(-1, 2)

k0 <- 10
k1 <- .1
pm <- 10
p0 <- 9.5
p1 <- 4.75
mu <- .95

R0_drug <- R0(x, k0, k1, pm, p0, p1, mu)
R0_nodrug <- R0(x, 0, 0, pm, p0, p1, mu)
xStar <- R_evol_level(k0, k1, p1, p0, pm, mu)
R0max <- max(R0_drug)

xmin <- min(x)
xmax <- max(x)
ymax <- 1.04 * max(R0_nodrug)

colS <- rgb2(8, 146, 6)
colI <- rgb2(255, 147, 1)
colR <- rgb2(255, 63, 30)

plot(x, R0_nodrug, ylim = c(0, ymax), type = "n", axes = FALSE, yaxs = "i",
     xlab = "level of resistance", ylab = "R0")

rect2(xmin, -1, 0, ymax, col = colS)
rect2(0, -1, 1, ymax, col = colI)
rect2(1, -1, xmax, ymax, col = colR)

abline(h = 1, lwd = 4, lty = 3)

lines2(x, R0_drug)
lines2(x, R0_nodrug, col = 4)

segments(xStar, -1, xStar, R0max, col = 2)
segments(-1, R0max, xStar, R0max, col = 2)

points(xStar, R0max, cex = 1.5, pch = 19, col = 2)
points(min(x), max(R0_nodrug), cex = 1.5, pch = 19, col = 4)

axis(1); axis(2)
```

A function that numerically integrates the integro-differential equation of the model:

```{r}
simulator <- function(size0, sigma0, pm, p0, p1, k0, k1, alpha, mu, eps, x, time) {
  dt <- diff(time)
  dx <- mean(diff(x))
  
  A <- 2 * eps^2
  B <- sqrt(pi * A)
  J <- purrr::map(x, ~ exp(-(.x - x)^2 / A) / B)
  ps <- p(x, pm, p0, p1)
  ks <- k(x, k0, k1)
  
  distribution <- dnorm(x, 0, sigma0)
  mr_bact_pop <- size0 * distribution / sum(distribution)
  bact_pop <- list(mr_bact_pop)
  mr_pop_size <- pop_size <- sum(mr_bact_pop)
  
  for (dt_val in dt) {
    L <- purrr::map_dbl(J, ~ sum(.x * ps * mr_bact_pop)) * dx / (1 + mr_pop_size)^alpha
    mr_bact_pop <- (mr_bact_pop + dt_val * L) / (1 + dt_val * (mu + ks))
    bact_pop <- c(bact_pop, list(mr_bact_pop))
    mr_pop_size <- sum(mr_bact_pop)
    pop_size <- c(pop_size, mr_pop_size)
  }
  
  list(bact_pop = as.matrix(as.data.frame(bact_pop)), pop_size = pop_size,
       x = x, time = time, param = c(size0  = size0,
                                     sigma0 = sigma0,
                                     pm     = pm,
                                     p0     = p0,
                                     p1     = p1,
                                     k0     = k0,
                                     k1     = k1,
                                     alpha  = alpha,
                                     mu     = mu,
                                     eps    = eps))
}
```

The mean level of resistance:

$$
\eta(t) = \int_\mathbb{R} x\frac{b(t,x)}{B(t)}dx
$$

A function that computes the mean resistance as a function of time:

```{r}
mean_resistance <- function(out) {
  with(out, bact_pop |> 
         as.data.frame() |> 
         purrr::map(magrittr::multiply_by, x) |> 
         purrr::map_dbl(sum) |> 
         magrittr::divide_by(pop_size))
}
```

The variance of the resistance level:

$$
\sigma^2(t) = \int_\mathbb{R} (x - \eta(t))^2\frac{b(t,x)}{B(t)}dx
$$

A function that computes the variance of resistance level as a function of time:

```{r}
resistance_variance <- function(out) {
  mean_res <- mean_resistance(out)
  x2 <- map(mean_res, ~ (.x - out$x)^2)
  with(out, bact_pop |>
         as.data.frame() |>
         purrr::map2(x2, magrittr::multiply_by) |> 
         purrr::map_dbl(sum) |> 
         magrittr::divide_by(pop_size))
}
```

A function that log-transforms the time of a simulator's output:

```{r}
log_transform <- function(out) {
  out$bact_pop <- out$bact_pop[, -1]
  out$time <- log10(out$time[-1])
  out$pop_size <- out$pop_size[-1]
  out
}
```

A function that resamples time and/or x:

```{r}
resample <- function(out, n_time, n_x = NULL) {
  if (is.null(n_x)) n_x <- length(out$x)
  bact_pop <- as.data.frame(t(out$bact_pop))
  time <- out$time
  x <- out$x
  time2 <- out$time <- seq(min(time), max(time), le = n_time)
  x2 <- out$x <- seq(min(x), max(x), le = n_x)
  out$bact_pop <- bact_pop |>
    map(~ approx(time, .x, time2)$y) |> 
    as_transposed_dataframe() |> 
    map(~ approx(x, .x, x2)$y) |> 
    as.data.frame() |> 
    t()
  out
}
```

Solving one example (takes 7"):

```{r cache = TRUE}
x <- seq2(-.5, 1.5)
time <- seq(0, 300, .1)
size0 <- 2.5
sigma0 <- .05
k0 <- 10
k1 <- .1
pm <- 10
p0 <- 9.5
p1 <- 4.75
mu <- .95
alpha <- 1
eps <- .01

out <- simulator(size0, sigma0, pm, p0, p1, k0, k1, alpha, mu, eps, x, time)
```

Log transforming time:

```{r}
out2 <- log_transform(out)
```

Resampling for the 2D plot:

```{r}
out2D <- resample(out2, 512)
```

Resampling for the 3D plot:

```{r}
out3D <- resample(out2, 100)
```

A 2D visualization (takes 0.5"):

```{r}
with(out2D, image(time, x, bact_pop, bty = "o",
#                  col = hcl.colors(12, "YlOrRd", rev = TRUE),
                  col = plot3D::jet.col(),
                  xlab = "log10(time)", ylab = "level of resistance"))
```

A 3D visualization (takes 1"):

```{r}
with(out3D, plot3D::persp3D(time, x, bact_pop, theta = -45, phi = 15, r = 10 * sqrt(3),
                            expand = .6, box = FALSE, shade = 1, ltheta = -45,
                            alpha = 1, image = TRUE, zlim = c(-.1, .1)))
```

Plotting the bacterial population size as a function of time:

```{r}
with(out2, plotl(time, log10(pop_size), xaxs = "i", axes = FALSE,
                 xlab = "time", ylab = "log10(population size)"))
add_ticks()
```

Plotting the mean resistance as a function of time:

```{r}
plotl(out2$time, mean_resistance(out2), axes = FALSE,
      xlab = "time", ylab = "mean level of resistance")

add_ticks()
```


## Treatment outpout

The fitness cost-benefice of resistance:

```{r}
cb <- function(p, k, mu) {
  k * pm / ((mu + k) * (pm - p))
}
```

The efficacy of the drug:

```{r}
k_mu <- function(cb, pm, mu) {
  gamma <- pm * (1 - cb) / 2 - mu
  (gamma + sqrt(gamma^2 + mu * (pm - mu))) / mu
}
```

Figure 4:

```{r}
# p02 <- p0
p02 <- 7
cb_max <- 4
veps <- .001

mu_val <- seq(veps, 1000, veps)
cb_val <- seq2(0, 25)
cb0 <- cb(p02, k0, mu_val)
cb1 <- cb(p1, k1, mu_val)
y0 <- c(0, k0 / mu_val)
y1 <- c(0, k1 / mu_val)
cb0 <- c(0, cb0)
cb1 <- c(0, cb1)

cbs <- seq2(0, cb_max)

line_green <- data.frame(x = cbs, y = approx(cb0, y0, cbs)$y) |> 
  na.exclude() |> 
  arrange(x)

line_red <- data.frame(x = cbs, y = approx(cb1, y1, cbs)$y) |> 
  na.exclude() |> 
  arrange(x)

line_black <- data.frame(x = cbs, y = approx(cb_val, k_mu(cb_val, pm, mu), cbs)$y) |> 
  na.exclude() |> 
  arrange(x)

Xintersect <- function(df) {
  df |>
    left_join(line_black, by = "x") |> 
    filter(y.x > y.y) |> 
    pull(x) |>
    head(1)
}

Xintersect0 <- Xintersect(line_green)
Xintersect1 <- Xintersect(line_red)

#######################################################################################

plot(NA, xlim = c(0, 4), ylim = c(0, 3), xaxs = "i", yaxs = "i", bty = "o",
     xlab = "cost / benefit of resistance", ylab = "drug efficacy")

full_join(line_black, line_green, by = "x") |>
  mutate(y = map2_dbl(y.x, y.y, min, na.rm = TRUE)) |> 
  with(polygon3(x, y, col = colS, alpha = 1))
polygon(c(line_green$x, rev(line_red$x)), c(line_green$y, rev(line_red$y)), col = colI,
        border = NA)
with(line_red, polygon4(x, y, col = colR))
with(line_black, polygon5(x, y, col = "lightgrey"))

with(filter(line_red, x < Xintersect1), lines2(x, y))
with(filter(line_red, x > Xintersect1), lines2(x, y, lty = 3))
with(filter(line_green, x < Xintersect0), lines2(x, y, col = 3))
with(filter(line_green, x > Xintersect0), lines2(x, y, col = 3, lty = 3))
abline(v = 1 / c(1 - p1 / pm, 1 - p02 / pm), col = 2:3)
with(line_black, lines2(x, y, col = 1))
```

## Exploring the effect of speed of evolution

A version of the simulator without any mutation:

```{r}
simulator_no_mut <- function(size0, sigma0, pm, p0, p1, k0, k1, alpha, mu, x, time) {
  dt <- diff(time)
  dx <- mean(diff(x))
  
  ps <- p(x, pm, p0, p1)
  ks <- k(x, k0, k1)
  
  distribution <- dnorm(x, 0, sigma0)
  mr_bact_pop <- size0 * distribution / sum(distribution)
  bact_pop <- list(mr_bact_pop)
  mr_pop_size <- pop_size <- sum(mr_bact_pop)
  
  for (dt_val in dt) {
    L <- ps * mr_bact_pop / (1 + mr_pop_size)^alpha
    mr_bact_pop <- (mr_bact_pop + dt_val * L) / (1 + dt_val * (mu + ks))
    bact_pop <- c(bact_pop, list(mr_bact_pop))
    mr_pop_size <- sum(mr_bact_pop)
    pop_size <- c(pop_size, mr_pop_size)
  }
  
  list(bact_pop = as.matrix(as.data.frame(bact_pop)), pop_size = pop_size,
       x = x, time = time, param = c(size0  = size0,
                                     sigma0 = sigma0,
                                     pm     = pm,
                                     p0     = p0,
                                     p1     = p1,
                                     k0     = k0,
                                     k1     = k1,
                                     alpha  = alpha,
                                     mu     = mu))
}
```

Comparing with and without mutation:

```{r}
x <- seq2(-.5, 1.5)
time <- seq(0, 300, .1)
size0 <- 2.5
sigma0 <- .05
k0 <- 10
k1 <- .1
pm <- 10
p0 <- 9.5
p1 <- 4.75
mu <- .95
alpha <- 1
eps <- .01

mutation <- simulator(size0, sigma0, pm, p0, p1, k0, k1, alpha, mu, eps, x, time)
no_mutation <- simulator_no_mut(size0, sigma0, pm, p0, p1, k0, k1, alpha, mu, x, time)

with(mutation, plotl(log10(time[-1]), log10(pop_size[-1]), xaxs = "i",
                xlab = "log10(time)", ylab = "log10(population size)"))
with(no_mutation, lines2(log10(time[-1]), log10(pop_size[-1])))

plotl(log10(mutation$time[-1]), mean_resistance(mutation)[-1],
      xlab = "log10(time)", ylab = "mean level of resistance")
lines2(log10(no_mutation$time[-1]), mean_resistance(no_mutation)[-1])

plotl(log10(mutation$time[-1]), resistance_variance(mutation)[-1], ylim = c(0, .004),
      xlab = "log10(time)", ylab = "variance of resistance")
lines2(log10(no_mutation$time[-1]), resistance_variance(no_mutation)[-1])
```


