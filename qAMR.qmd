---
title: "Quantitative AMR"
format: html
editor: visual
---

## Packages

```{r}
needed_packages <- c("magrittr",
                     "plot3D",
                     "purrr",
                     "rgl")

to_install <- needed_packages[! needed_packages %in% installed.packages()[,"Package"]]
if (length(to_install)) install.packages(to_install)
```


## Functions

```{r}
polygon2 <- function(x, y, col = 4, alpha = .2, ...) {
  polygon(c(x[1], x, tail(x, 1)), c(0, y, 0), col = adjustcolor(col, alpha),
          border = NA)
}
```

```{r}
plotl <- function(..., lwd = 4, col = 4) plot(..., type = "l", lwd = lwd, col = col)
```

```{r}
lines2 <- function(..., lwd = 4, col = 2) lines(..., lwd = lwd, col = col)
```

```{r}
rgb2 <- function(...) rgb(..., alpha = 255 / 3, maxColorValue = 255)
```

```{r}
rect2 <- function(...) rect(..., border = NA)
```

```{r}
seq2 <- function(...) seq(..., le = 512)
```

## A bimodal distribution

```{r}
x <- seq(0, 10, le = 512)
y1 <- dnorm(x, 2.5, .8)
y2 <- dnorm(x,7, .5)
plot(x, y1, type = "n")
polygon2(x, y1)
polygon2(x, .25 * y2)
```


## A scale-free metric of resistance

```{r}
C0 <- 1
C1 <- 3
mic <- seq(0, 10, le = 512)
x <- log(mic / C0) / log(C1 / C0)
plot(mic, x, type = "l", lwd = 4, col = 4)
```


## The MMNP model

The antimicrobial activity as a function of bacterial resistance:

```{r}
k <- function(x, k0, k1) {
  if (any(c(k0, k1) == 0)) return(0)
  k0 * (k1 / k0)^x
}
```

An illustration:

```{r}
x <- seq2(-2, 4)
plotl(x, k(x, 5, 3))
```

The maximum bacterial growth rate as a function of bacterial resistance:

```{r}
p <- function(x, pm, p0, p1) {
  pm / (1 + ((pm - p0) / p0) * (p0 * (pm - p1) / (p1 * (pm - p0)))^x)
}
```

An illustration:

```{r}
x <- seq2(-9, 10)
plotl(x, p(x, 10, 5, 3))
```

The basic reproduction ratio:

```{r}
R0 <- function(x, k0 = 3, k1 = .03, pm = 10, p0 = 9.5, p1 = 4.75, mu = .9) {
  p(x, pm, p0, p1) / (mu + k(x, k0, k1))
}
```

A function that looks for the ESS:

```{r}
R_evol_level <- function(k0, k1, p1, p0, pm, mu, interval = c(-10, 10), ...) {
  Delta <- p0 * (pm - p1) / (p1 * (pm - p0))
  Delta2 <- pm / p0 - 1
  theta2 <- k1 / k0
  derivative <- function(x) {
    abs(log(k0 / k1) * k0 * theta2^x / (mu + k0 * theta2^x) -
          Delta2 * log(Delta) * Delta^x / (1 + Delta2 * Delta^x))
  }
  optimize(derivative, interval = interval, ...)$minimum
}
```

Plot of R0:

```{r}
x <- seq(-.5, 1.5, le = 512)

k0 <- 10
k1 <- .1
pm <- 10
p0 <- 9.5
p1 <- 4.75
mu <- .95

R0_drug <- R0(x, k0, k1, pm, p0, p1, mu)
R0_nodrug <- R0(x, 0, 0, pm, p0, p1, mu)
xStar <- R_evol_level(k0, k1, p1, p0, pm, mu)
R0max <- max(R0_drug)

xmin <- min(x)
xmax <- max(x)
ymax <- max(R0_nodrug)

colS <- rgb2(8, 146, 6)
colI <- rgb2(255, 147, 1)
colR <- rgb2(255, 63, 30)

plot(x, R0_nodrug, ylim = c(0, ymax), type = "n", axes = FALSE,
     xlab = "level of resistance", ylab = "R0")

rect2(xmin, -1, 0, ymax, col = colS)
rect2(0, -1, 1, ymax, col = colI)
rect2(1, -1, xmax, ymax, col = colR)

lines2(x, R0_drug)
lines2(x, R0_nodrug, col = 4)

segments(xStar, -1, xStar, R0max, col = 2)
segments(-1, R0max, xStar, R0max, col = 2)

points(xStar, R0max, cex = 1.5, pch = 19, col = 2)
points(min(x), max(R0_nodrug), cex = 1.5, pch = 19, col = 4)

axis(1); axis(2)
```

A function that numerically integrates the integro-differential equation of the model:

```{r}
integrodiffsim <- function(size0, sigma0, pm, p0, p1, k0, k1, alpha, mu, eps, x, time) {
  dx <- mean(diff(x))
  dt <- mean(diff(time))
  
  ps <- p(x, pm, p0, p1)
  ks <- k(x, k0, k1)
  
  bb <- size0 * dnorm(x, 0, sigma0)
  BB <- list(bb)
  tp <- TP <- sum(bb)
  
  for (t in tail(time, -1)) {
    LI <- purrr::map_dbl(x, ~ sum(dnorm(.x - x, 0, eps) * ps * bb)) * dx / (1 + tp)^alpha
    bb <- (bb + dt * LI) / (1 + dt * (mu + ks))
    BB <- c(BB, list(bb))
    tp <- sum(bb)
    TP <- c(TP, tp)
  }
  
  list(BB = as.matrix(as.data.frame(BB)), TP = TP, x = x, time = time,
       param = c(size0  = size0,
                 sigma0 = sigma0,
                 pm     = pm,
                 p0     = p0,
                 p1     = p1,
                 k0     = k0,
                 k1     = k1,
                 alpha  = alpha,
                 mu     = mu,
                 eps    = eps))
}
```

```{r}
dnorm2 <- function(x, mean, sd) {
  exp(-(x - mean)^2 / (2 * sigma^2)) / sqrt(2 * pi * sigma^2)
}
```

```{r}
integrodiffsim2 <- function(size0, sigma0, pm, p0, p1, k0, k1, alpha, mu, eps, x, time) {
  dx <- mean(diff(x))
  dt <- mean(diff(time))
  
  ps <- p(x, pm, p0, p1)
  ks <- k(x, k0, k1)
  
  bb <- size0 * dnorm(x, 0, sigma0)
  BB <- list(bb)
  tp <- TP <- sum(bb)
  
  A <- 2 * eps^2
  B <- sqrt(2 * pi * eps^2)
  J <- function(x) exp(-x^2 / A) / B
  
  for (t in tail(time, -1)) {
    LI <- purrr::map_dbl(x, ~ sum(J(.x - x) * ps * bb)) * dx / (1 + tp)^alpha
    bb <- (bb + dt * LI) / (1 + dt * (mu + ks))
    BB <- c(BB, list(bb))
    tp <- sum(bb)
    TP <- c(TP, tp)
  }
  
  list(BB = as.matrix(as.data.frame(BB)), TP = TP, x = x, time = time,
       param = c(size0  = size0,
                 sigma0 = sigma0,
                 pm     = pm,
                 p0     = p0,
                 p1     = p1,
                 k0     = k0,
                 k1     = k1,
                 alpha  = alpha,
                 mu     = mu,
                 eps    = eps))
}
```

Solving one example:

```{r}
x <- seq2(-.5, 1.5)
time <- seq2(0, 300)
size0 <- .05
sigma0 <- .05
k0 <- 10
k1 <- .1
pm <- 10
p0 <- 9.5
p1 <- 4.75
mu <- .95
alpha <- 1
eps <- .01

out <- integrodiffsim(size0, sigma0, pm, p0, p1, k0, k1, alpha, mu, eps, x, time)
```

Benchmarking:

```{r}
x <- seq2(-.5, 1.5)
time <- seq2(0, 300)
size0 <- .05
sigma0 <- .05
k0 <- 10
k1 <- .1
pm <- 10
p0 <- 9.5
p1 <- 4.75
mu <- .95
alpha <- 1
eps <- .01

bench::mark(
  integrodiffsim(size0, sigma0, pm, p0, p1, k0, k1, alpha, mu, eps, x, time),
  integrodiffsim2(size0, sigma0, pm, p0, p1, k0, k1, alpha, mu, eps, x, time))
```


A first visualization:

```{r}
with(out, image(x, log10(time[-1]), BB[, -1]), xlab = "log10(time)")
box(bty = "o")
```

A second visualization:

```{r}
with(out, persp(x, log10(time[-1]), BB[, -1], col = 4, border = NA, shade = TRUE,
                theta = -45, phi = 15, r = 10 * sqrt(3), expand = 1 / 3, box = FALSE))
```

A third visualization:

```{r}
with(out, plot3D::persp3D(x, log10(time[-1]), BB[, -1], theta = -45, phi = 15,
                          r = 10 * sqrt(3), expand = .6, box = FALSE, shade = 1,
                          alpha = 1, image = TRUE, zlim = c(-.1, .1)))
```

A fourth visualization:

```{r}
# rgl::open3d()
# rgl::persp3d(x, log10(time[-1]), out[, -1])
```

```{r}
with(out, plotl(log10(time[-1]), log10(TP[-1]),
                xlab = "log10(time)", ylab = "log10(population size)"))
```

```{r}
mean_resistance <- function(out) {
  with(out, BB |> 
         as.data.frame() |> 
         purrr::map(magrittr::multiply_by, x) |> 
         purrr::map_dbl(sum) |> 
         magrittr::divide_by(TP))
}
```

```{r}
plotl(log10(out$time[-1]), mean_resistance(out)[-1],
      xlab = "log10(time)", ylab = "mean level of resistance")
```
