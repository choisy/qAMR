---
title: "Quantitative AMR"
format: html
editor: visual
---

```{r}
polygon2 <- function(x, y, col = 4, alpha = .2, ...) {
  polygon(c(x[1], x, tail(x, 1)), c(0, y, 0), col = adjustcolor(col, alpha),
          border = NA)
}
```


```{r}
x <- seq(0, 10, le = 512)
y1 <- dnorm(x, 2.5, .8)
y2 <- dnorm(x,7, .5)
plot(x, y1, type = "n")
# lines(x, .25 * y2)
polygon2(x, y1)
polygon2(x, .25 * y2)
```
```{r}
C0 <- 1
C1 <- 3
mic <- seq(0, 10, le = 512)
x <- log(mic / C0) / log(C1 / C0)
plot(mic, x, type = "l", lwd = 4, col = 4)
#abline(h = 0:1)
#abline(v = c(C0, C1))
```

```{r}
k <- function(x, k0, k1) {
  k0 * (k1 / k0)^x
}

x <- seq(-2, 4, le = 512)
plot(x, k(x, 5, 3), type = "l", col = 4, lwd = 4)
```

```{r}
p <- function(x, pm, p0, p1) {
  pm / (1 + ((pm - p0) / p0) * (p0 * (pm - p1) / (p1 * (pm - p0)))^x)
}

x <- seq(-9, 10, le = 512)
plot(x, p(x, 10, 5, 3), type = "l", col = 4, lwd = 4)
```

```{r}
R0 <- function(x, k0 = 3, k1 = .03, pm = 10, p0 = 9.5, p1 = 4.75, mu = .9) {
  p(x, pm, p0, p1) / (mu + k(x, k0, k1))
}

R00 <- function(x, pm = 10, p0 = 9.5, p1 = 4.75, mu = .9) {
  p(x, pm, p0, p1) / (mu)
}

x <- seq(-.5, 1.5, le = 512)

plot(x, R00(x), type = "l", col = 4, lwd = 4, ylim = c(0, 11))
lines(x, R0(x), col = 2, lwd = 4)

#abline(v = c(0, 1))
#abline(h = c(0, 1))
```

## Matlab code

```{r}
h_S <- function(x, mu, pm, p0) {
  mu / (1 / (1 - p0 / pm) - x)
}
```

```{r}
h_R <- function(x, mu, pm, p1, k0_1) {
  k0_1 * mu / (1 / (1 - p0 / pm) - x)
}
```

```{r}
R_evol_level <- function(k0, k1, p1, p0, pm, mu, ...) {
  d <- k0 / k1
  b <- pm / p0 - 1
  a <- p0 * (pm - p1) / (p1 * (pm - p0))
  f <- function(x) {
    abs(log(d) * k0 * (k1 / k0)^x / (mu + k0 * (k1 / k0)^x) -
      b * log(a) * a^x / (1 + b * a^x))
  }
  optimize(f, ...)$minimum
}
```

```{r}
# maximum growth rate of susceptible bacteria:
pm <- 10
# maximum growth rate of a bacteria with resistance x = 0 (< pm):
p0 <- .95 * pm
# R0 of susceptible bacteria in absence of antimicriobial (> 1):
R00 <- 10
# shape parameter of density dependance on bacterial growth:
alpha <- 1
# mutations variance in the phenotypic space:
eps <- .01
# variance of initial bacterial population:
sigma0 <- .05
# size of initial bacterial population:
size_b0 <- .05
# simulation time:
T <- 300
# p1 / p0 (between 0 and 1):
p1_0 <- .5
# k1 / k0:
k1_0 <- .01
# antimicrobial activity on a bacteria with resistance x = 0:
k0 <- 10
```

```{r}
# antimicrobial activity on a bacteria with resistance x = 1:
k1 <- k0 * k1_0
# bacteria natural death rate:
mu <- p0 / R00
# maximum growth rate of a bacteria with resistance x = 1:
p1 <- p0 * p1_0
# k0 / k1:
k0_1 <- 1 / k1_0
# relative cost of resistance:
Delta <- p0 * (pm - p1) / (p1 * (pm - p0))
# average fitness cost-benefice ratio of the resistance:
Ratio_cost_ben <- log(Delta) / log(k0_1)
```

R_level = level of resistance, a real parameter
k0_factor = the efficiency of the MIC (at x=0) = k0/(1+theta)^R_level

Not used:

```{r}
# ?????????????????
cb1 <- 1 / (1 - p1 / pm)
# ?????????????????
cb0 <- 1 / (1 - p0 / pm)
# ?????????????????
k0_effi0 <- mu / cb0
# ?????????????????
k0_effi1 <- mu * k0_1 / cb1
```

```{r}
xStar <- R_evol_level(k0, k1, p1, p0, pm, mu, c(-10, 10))
```

```{r}
curveS <- h_S(Ratio_cost_ben, mu, pm, p0)
curveR <- h_R(Ratio_cost_ben, mu, pm, p1, k0_1)
```

Plot of R0:

```{r}
x <- seq(-.5, 1.5, le = 512)
k <- k0 * (k1 / k0)^x
pNum <- 1 + (pm / p0 - 1) * (p0 * (pm - p1) / (p1 * (pm - p0)))^x
p <- pm / pNum
R0 <- p / (mu + k)

plot(x, p / mu, type = "l", ylim = c(0, 11))
lines(x, R0, lty = 2)
abline(h = max(R0))
abline(v = xStar)
```

```{r}
time <- seq(0, T, le = 512)

dx <- mean(diff(x))
dt <- mean(diff(time))

bb <- size_b0 * dnorm(x, 0, sigma0)
BB <- list(bb)
TotpopB <- sum(bb)

for (tn in tail(time, -1)) {
  GrowthRegulator <- 1 / (1 + tail(TotpopB, 1))^alpha
  IntB <- p * bb
  LI <- GrowthRegulator * dx * purrr::map_dbl(x, ~ sum(IntB * dnorm(.x - x, 0, eps)))
  bb <- (bb + dt * LI) / (1 + dt * (mu + k))
  BB <- c(BB, list(bb))
  TotpopB <- c(TotpopB, sum(bb))
}

BB <- as.matrix(as.data.frame(BB))
```

```{r}
image(x, log10(time[-1]), BB[, -1])
```


```{r}
persp(x, log10(time[-1]), BB[, -1], col = 4, border = NA, shade = TRUE,
      theta = -45, phi = 15, r = 10 * sqrt(3), expand = 1 / 3, box = FALSE)
```

```{r}
persp3D(x, log10(time[-1]), BB[, -1], theta = -45, phi = 15, r = 10 * sqrt(3),
        expand = .6, box = FALSE, shade = 1, alpha = 1, image = TRUE, zlim = c(-.1, .1))
```


```{r}
#open3d()
#persp3d(x, log10(time[-1]), BB[, -1])
```


## Matlab code 2

```{r}
h_S <- function(x, mu, pm, p0) {
  mu / (1 / (1 - p0 / pm) - x)
}
```

```{r}
h_R <- function(x, mu, pm, p1, k0_1) {
  k0_1 * mu / (1 / (1 - p0 / pm) - x)
}
```

A function that looks at the ESS:

```{r}
R_evol_level <- function(k0, k1, p1, p0, pm, mu, interval = c(-10, 10), ...) {
  Delta <- p0 * (pm - p1) / (p1 * (pm - p0))
  Delta2 <- pm / p0 - 1
  theta2 <- k1 / k0
  derivative <- function(x) {
    abs(log(k0 / k1) * k0 * theta2^x / (mu + k0 * theta2^x) -
          Delta2 * log(Delta) * Delta^x / (1 + Delta2 * Delta^x))
  }
  optimize(derivative, interval = interval, ...)$minimum
}
```

```{r}
# maximum growth rate of susceptible bacteria:
pm <- 10
# maximum growth rate of a bacteria with resistance x = 0 (< pm):
p0 <- .95 * pm
# R0 of susceptible bacteria in absence of antimicriobial (> 1):
R00 <- 10
# shape parameter of density dependance on bacterial growth:
alpha <- 1
# mutations variance in the phenotypic space:
eps <- .01
# variance of initial bacterial population:
sigma0 <- .05
# size of initial bacterial population:
size_b0 <- .05
# simulation time:
T <- 300
# p1 / p0 (between 0 and 1):
p1_0 <- .5
# k1 / k0:
k1_0 <- .01
# antimicrobial activity on a bacteria with resistance x = 0:
k0 <- 10
```

```{r}
# antimicrobial activity on a bacteria with resistance x = 1:
k1 <- k0 * k1_0
# bacteria natural death rate:
mu <- p0 / R00
# maximum growth rate of a bacteria with resistance x = 1:
p1 <- p0 * p1_0
# k0 / k1:
k0_1 <- 1 / k1_0
# relative cost of resistance:
Delta <- p0 * (pm - p1) / (p1 * (pm - p0))
# average fitness cost-benefice ratio of the resistance:
Ratio_cost_ben <- log(Delta) / log(k0_1)
```

R_level = level of resistance, a real parameter
k0_factor = the efficiency of the MIC (at x=0) = k0/(1+theta)^R_level

Not used:

```{r}
# ?????????????????
cb1 <- 1 / (1 - p1 / pm)
# ?????????????????
cb0 <- 1 / (1 - p0 / pm)
# ?????????????????
k0_effi0 <- mu / cb0
# ?????????????????
k0_effi1 <- mu * k0_1 / cb1
```

```{r}
curveS <- h_S(Ratio_cost_ben, mu, pm, p0)
curveR <- h_R(Ratio_cost_ben, mu, pm, p1, k0_1)
```

```{r}
k <- function(x, k0, k1) {
  if (any(c(k0, k1) == 0)) return(0)
  k0 * (k1 / k0)^x
}
```

```{r}
p <- function(x, pm, p0, p1) {
  pm / (1 + ((pm - p0) / p0) * (p0 * (pm - p1) / (p1 * (pm - p0)))^x)
}
```

```{r}
R0 <- function(x, k0 = 3, k1 = .03, pm = 10, p0 = 9.5, p1 = 4.75, mu = .9) {
  p(x, pm, p0, p1) / (mu + k(x, k0, k1))
}
```

```{r}
plotl <- function(..., lwd = 4, col = 4) plot(..., type = "l", lwd = lwd, col = col)
```

```{r}
lines2 <- function(..., lwd = 4, col = 2) lines(..., lwd = lwd, col = col)
```

```{r}
rgb2 <- function(...) rgb(..., alpha = 255 / 3, maxColorValue = 255)
```

```{r}
rect2 <- function(...) rect(..., border = NA)
```

Plot or R0:

```{r}
x <- seq(-.5, 1.5, le = 512)

k0 <- 10
k1 <- .1
pm <- 10
p0 <- 9.5
p1 <- 4.75
mu <- .95

R0_drug <- R0(x, k0, k1, pm, p0, p1, mu)
R0_nodrug <- R0(x, 0, 0, pm, p0, p1, mu)
xStar <- R_evol_level(k0, k1, p1, p0, pm, mu)
R0max <- max(R0_drug)

xmin <- min(x)
xmax <- max(x)
ymax <- max(R0_nodrug)

colS <- rgb2(8, 146, 6)
colI <- rgb2(255, 147, 1)
colR <- rgb2(255, 63, 30)

plot(x, R0_nodrug, ylim = c(0, ymax), type = "n", axes = FALSE,
     xlab = "level of resistance", ylab = "R0")

rect2(xmin, -1, 0, ymax, col = colS)
rect2(0, -1, 1, ymax, col = colI)
rect2(1, -1, xmax, ymax, col = colR)

lines2(x, R0_drug)
lines2(x, R0_nodrug, col = 4)

segments(xStar, -1, xStar, R0max, col = 2)
segments(-1, R0max, xStar, R0max, col = 2)

points(xStar, R0max, cex = 1.5, pch = 19, col = 2)
points(min(x), max(R0_nodrug), cex = 1.5, pch = 19, col = 4)

axis(1); axis(2)
```




```{r}
seq2 <- function(...) seq(..., le = 512)
```


```{r}
integrodiffsim <- function(size0, sigma0, pm, p0, p1, k0, k1, alpha, mu, eps, x, time) {
  dx <- mean(diff(x))
  dt <- mean(diff(time))
  
  ps <- p(x, pm, p0, p1)
  ks <- k(x, k0, k1)
  
  bb <- size0 * dnorm(x, 0, sigma0)
  BB <- list(bb)
  tp <- TP <- sum(bb)
  
  for (t in tail(time, -1)) {
    LI <- purrr::map_dbl(x, ~ sum(dnorm(.x - x, 0, eps) * ps * bb)) * dx / (1 + tp)^alpha
    bb <- (bb + dt * LI) / (1 + dt * (mu + ks))
    BB <- c(BB, list(bb))
    tp <- sum(bb)
    TP <- c(TP, tp)
  }
  
  as.matrix(as.data.frame(BB))
}
```

```{r}
size0 <- .05
sigma0 <- .05
k0 <- 10
k1 <- .1
pm <- 10
p0 <- 9.5
p1 <- 4.75
mu <- .95
alpha <- 1
eps <- .01
x <- seq2(-.5, 1.5)
time <- seq2(0, 300)

out <- integrodiffsim(size0, sigma0, pm, p0, p1, k0, k1, alpha, mu, eps, x, time)
```

```{r}
image(x, log10(time[-1]), out[, -1])
```


```{r}
persp(x, log10(time[-1]), out[, -1], col = 4, border = NA, shade = TRUE,
      theta = -45, phi = 15, r = 10 * sqrt(3), expand = 1 / 3, box = FALSE)
```

```{r}
library(plot3D)
persp3D(x, log10(time[-1]), out[, -1], theta = -45, phi = 15, r = 10 * sqrt(3),
        expand = .6, box = FALSE, shade = 1, alpha = 1, image = TRUE, zlim = c(-.1, .1))
```


```{r}
#open3d()
#persp3d(x, log10(time[-1]), BB[, -1])
```

